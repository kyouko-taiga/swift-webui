env DATA_DIRECTORY;
env DOCKER_PORT;
env REDIS_PORT;
env POSTGRES_PORT;
env POSTGRES_USER;
env POSTGRES_PASSWORD;
env POSTGRES_DATABASE;
env DOCKER_USER;
env DOCKER_SECRET;
env APPLICATION_ID;
env APPLICATION_SECRET;

worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  resolver "8.8.8.8" "4.4.4.4";

  init_worker_by_lua_block {
    package.preload ["cjson"] = function ()
      return require "rapidjson"
    end
    local Config = require "lapis.config".get ()
    local Qless  = require "resty.qless"
    local Worker = require "resty.qless.worker"
    local worker = Worker.new (Config.redis)
    worker:start {
      interval    = 1,
      concurrency = 5,
      reserver    = "ordered",
      queues      = { "webui" },
    }
  }

  server {
    server_name     "${{HOST}}";
    listen          "${{PORT}}";
    default_type    "application/json";
    lua_code_cache  on;
    gzip            on;
    gzip_types      text/plain
                    text/html
                    application/css
                    application/javascript
                    application/lua
                    application/json;

    location @lapis {
      content_by_lua_block {
        package.preload ["cjson"] = function ()
          return require "rapidjson"
        end
        require "resty.core"
        require "lapis".serve "webui"
      }
    }

    location / {
      autoindex           off;
      sendfile            on;
      sendfile_max_chunk  1m;
      etag                on;
      root                /www;
      try_files           $uri = @lapis;
    }

    location /api/ {
      content_by_lua_block {
        package.preload ["cjson"] = function ()
          return require "rapidjson"
        end
        require "resty.core"
        require "lapis".serve "webui"
      }
    }

    location /streams/ {
      set $target "";
      access_by_lua_block {
        package.preload ["cjson"] = function ()
          return require "rapidjson"
        end
        require "resty.core"
        require "lapis".serve "webui"
      }
      proxy_pass          $target;
      proxy_http_version  1.1;
      proxy_set_header    Upgrade $http_upgrade;
      proxy_set_header    Connection "upgrade";
    }

  }

}
